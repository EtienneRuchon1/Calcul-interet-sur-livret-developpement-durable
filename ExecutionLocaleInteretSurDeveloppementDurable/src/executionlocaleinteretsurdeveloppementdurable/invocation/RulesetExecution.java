//      -----------------------------------------------------------------------
//      Licensed Materials - Property of IBM
//      IBM Decision Server
//      (c) Copyright IBM Corporation 1987, 2022. All Rights Reserved.
//      RuleApp: Configuration_Deploiement_Interet_Sur_Developpement_Durable
//      Date: 6 déc. 2022 à 14:52:38
//      Generated by: Decision Server 8.10.2.0
//
//      N O T I C E
//
//      Changes to this file will be lost if the code is regenerated.
//      Note to U.S. Government Users Restricted Rights: 
//      Use, duplication or disclosure restricted by GSA ADP Schedule 
//      Contract with IBM Corp.
//     -----------------------------------------------------------------------

package executionlocaleinteretsurdeveloppementdurable.invocation;

import ilog.rules.res.model.IlrPath;
import ilog.rules.res.session.IlrJ2SESessionFactory;
import ilog.rules.res.session.IlrSessionRequest;
import ilog.rules.res.session.IlrSessionResponse;
import ilog.rules.res.session.IlrStatelessSession;
import ilog.rules.res.session.config.IlrPersistenceType;
import ilog.rules.res.session.config.IlrSessionFactoryConfig;

import java.io.File;
import java.io.PrintWriter;

/**
 * Classe de base pour l'appel de l'ensemble de règles
 */
abstract class RulesetExecution {

	private static final String RULE_APP_DIRECTORY = "C:/Users/eruchon/IBM/workspaces/Exos/Calcul Interet Sur Developpement Durable Regle/sortie";

	private static IlrJ2SESessionFactory sessionFactory = null;

	/**
	 * Renvoie le chemin d'accès à l'ensemble de règles dans le référentiel du Rule
	 * Execution Server
	 */
	protected abstract String getRulesetPath();

	/**
	 * Initialiser la session de requête avec des valeurs pour les paramètres
	 * d'entrée
	 */
	protected abstract void initRequest(IlrSessionRequest request);

	/**
	 * Récupérer les valeurs dans la réponse des paramètres de sortie
	 */
	protected abstract void handleResponse(IlrSessionResponse response);

	/**
	 * Appelle l'ensemble de règles
	 */
	public void run() throws RulesetExecutionException {
		IlrJ2SESessionFactory factory = getFactory();
		String rulesetPath = getRulesetPath();

		try {
			IlrSessionRequest request = factory.createRequest();

			request.setRulesetPath(IlrPath.parsePath(getRulesetPath()));
			initRequest(request);

			IlrSessionResponse response;
			IlrStatelessSession session = factory.createStatelessSession();

			response = session.execute(request);
			handleResponse(response);

		} catch (Exception e) {
			String rulesetName = rulesetPath.substring(rulesetPath.lastIndexOf("/"));
			throw new RulesetExecutionException(rulesetName, e);
		} finally {
			if (factory != null) {
				factory.release();
			}
		}
	}

	private synchronized IlrJ2SESessionFactory getFactory() {
		if (sessionFactory == null) {
			IlrSessionFactoryConfig config = IlrJ2SESessionFactory.createDefaultConfig();
			config.getXUConfig().getPersistenceConfig().setPersistenceType(IlrPersistenceType.FILE);
			config.getXUConfig().getPersistenceConfig().getFilePersistenceConfig()
					.setDirectory(new File(RULE_APP_DIRECTORY));
			PrintWriter writer = new PrintWriter(System.out);
			config.getXUConfig().setLogWriter(writer);

			sessionFactory = new IlrJ2SESessionFactory(config);
		}
		return sessionFactory;
	}

}
